@model IEnumerable<BooksReview.Models.Genere>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Add a new Genre", "Create", new { area = "" }, new { @class = "review-link" })
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.Id }, new { @class = "review-link" }) |
            @Html.ActionLink("Details", "Details", new { id=item.Id }, new { @class = "review-link" }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.Id }, new { @class = "review-link" })
        </td>
    </tr>
}

</table>

<script type="text/javascript">
    var canvas = document.getElementById('jamalcanvs');
    var ctx = canvas.getContext('2d');

    var image = new Image(60, 45);   // using optional size for image
    image.onload = drawImageActualSize; // draw when image has loaded

    // load an image of intrinsic size 300x227 in CSS pixels
    image.src = '~/Content/books.png';

    function drawImageActualSize() {
        // use the intrinsic size of image in CSS pixels for the canvas element
        canvas.width = this.naturalWidth;
        canvas.height = this.naturalHeight;

        // will draw the image as 300x227 ignoring the custom size of 60x45
        // given in the constructor
        ctx.drawImage(this, 0, 0);
    }

</script>
